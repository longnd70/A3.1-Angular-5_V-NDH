{"ast":null,"code":"// import { fakeMovies } from '../models/fake-movies';\nimport { Movie } from '../models/movie'; //Get data asynchronously with Observable\n\nimport { catchError, of, tap } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class MovieService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.moviesURL = 'http://localhost:3000/movies';\n  }\n\n  getMovies() {\n    // this.messageService.add(`${ new Date().toLocaleString()}. Get movie list`);\n    // return of(fakeMovies);\n    return this.http.get(this.moviesURL).pipe(tap(receivedMovies => console.log('receivedMovies=${JSON.stringify(receivedMovies)}')), catchError(error => of([])));\n  }\n\n  getMovieFromId(id) {\n    // return of(fakeMovies.find(movie => movie.id === id));\n    const url = `${this.moviesURL}/${id}`;\n    return this.http.get(url).pipe(tap(selectedMovie => console.log('selectedMovie=${JSON.stringify(selectedMovie)}')), catchError(error => of(new Movie())));\n  }\n\n  Observable() {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this;\n  }\n\n}\n\nMovieService.ɵfac = function MovieService_Factory(t) {\n  return new (t || MovieService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\n\nMovieService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MovieService,\n  factory: MovieService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA;AACA,SAASA,KAAT,QAAsB,iBAAtB,C,CACA;;AACA,SAASC,UAAT,EAAiCC,EAAjC,EAAqCC,GAArC,QAAgD,MAAhD;AAEA,SAAqBC,WAArB,QAAwC,sBAAxC;;;;AAKA,OAAM,MAAOC,YAAP,CAAmB;EACvBC,YAAoBC,IAApB,EAA6CC,cAA7C,EAA2E;IAAvD;IAAyB;IACrC,iBAAY,8BAAZ;EADwE;;EAEhFC,SAAS;IACP;IACA;IACA,OAAO,KAAKF,IAAL,CAAUG,GAAV,CAAuB,KAAKC,SAA5B,EAAuCC,IAAvC,CACLT,GAAG,CAACU,cAAc,IAAIC,OAAO,CAACC,GAAR,CAAY,kDAAZ,CAAnB,CADE,EAELd,UAAU,CAACe,KAAK,IAAId,EAAE,CAAC,EAAD,CAAZ,CAFL,CAAP;EAID;;EACDe,cAAc,CAACC,EAAD,EAAW;IACvB;IACA,MAAMC,GAAG,GAAG,GAAG,KAAKR,SAAS,IAAIO,EAAE,EAAnC;IACA,OAAO,KAAKX,IAAL,CAAUG,GAAV,CAAqBS,GAArB,EAA0BP,IAA1B,CACLT,GAAG,CAACiB,aAAa,IAAIN,OAAO,CAACC,GAAR,CAAY,gDAAZ,CAAlB,CADE,EAELd,UAAU,CAACe,KAAK,IAAId,EAAE,CAAC,IAAIF,KAAJ,EAAD,CAAZ,CAFL,CAAP;EAID;;EACyBqB,UAAU;IAClC,MAAMC,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAInB,WAAJ,CAAgB;QAAE,gBAAe;MAAjB,CAAhB;IADS,CAApB;IAGA,OAAO,IAAP;EACD;;AAxBsB;;;mBAAZC,cAAYmB;AAAA;;;SAAZnB;EAAYoB,SAAZpB,YAAY;EAAAqB,YAFX","names":["Movie","catchError","of","tap","HttpHeaders","MovieService","constructor","http","messageService","getMovies","get","moviesURL","pipe","receivedMovies","console","log","error","getMovieFromId","id","url","selectedMovie","Observable","httpOptions","headers","i0","factory","providedIn"],"sourceRoot":"","sources":["D:\\Projects\\Angular5\\src\\app\\movie.service.ts"],"sourcesContent":["import { Injectable, Type } from '@angular/core';\n// import { fakeMovies } from '../models/fake-movies';\nimport { Movie } from '../models/movie';\n//Get data asynchronously with Observable\nimport { catchError, Observable, of, tap } from 'rxjs';\nimport { MessageService } from './message.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MovieService {\n  constructor(private http: HttpClient, public messageService: MessageService) { }\n  private moviesURL = 'http://localhost:3000/movies';\n  getMovies(): Observable<Movie[]> {\n    // this.messageService.add(`${ new Date().toLocaleString()}. Get movie list`);\n    // return of(fakeMovies);\n    return this.http.get<Movie[]>(this.moviesURL).pipe(\n      tap(receivedMovies => console.log('receivedMovies=${JSON.stringify(receivedMovies)}')),\n      catchError(error => of([]))\n    );\n  }\n  getMovieFromId(id: number): Observable<Movie> {\n    // return of(fakeMovies.find(movie => movie.id === id));\n    const url = `${this.moviesURL}/${id}`;\n    return this.http.get<Movie>(url).pipe(\n      tap(selectedMovie => console.log('selectedMovie=${JSON.stringify(selectedMovie)}')),\n      catchError(error => of(new Movie()))\n    );\n  }\n  updateMovie(movie: Movie) Observable<any>{\n    const httpOptions = {\n      headers: new HttpHeaders({ 'Content-Type':'application/json' })\n    };\n    return this\n  } \n}"]},"metadata":{},"sourceType":"module"}