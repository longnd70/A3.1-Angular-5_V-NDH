{"ast":null,"code":"// import { fakeMovies } from '../models/fake-movies';\nimport { Movie } from '../models/movie'; //Get data asynchronously with Observable\n\nimport { catchError, of, tap } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class MovieService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.moviesURL = 'http://localhost:3000/movies';\n  }\n\n  getMovies() {\n    // this.messageService.add(`${ new Date().toLocaleString()}. Get movie list`);\n    // return of(fakeMovies);\n    return this.http.get(this.moviesURL).pipe(tap(receivedMovies => console.log('receivedMovies=${JSON.stringify(receivedMovies)}')), catchError(error => of([])));\n  }\n\n  getMovieFromId(id) {\n    // return of(fakeMovies.find(movie => movie.id === id));\n    const url = `${this.moviesURL}/${id}`;\n    return this.http.get(url).pipe(tap(selectedMovie => console.log('selectedMovie=${JSON.stringify(selectedMovie)}')), catchError(error => of(new Movie())));\n  } // PUT: update the movie on the Server\n\n\n  updateMovie(movie) {\n    return this.http.put(`${this.moviesURL}/${movie.id}`, movie, httpOptions).pipe(tap(updatedMovie => console.log('updatedMovie=${JSON.stringify(updatedMovie)}')), catchError(error => of(new Movie())));\n  } // POST: add a new movie to the Server\n\n\n  addMovie(newMovie) {\n    return this.http.post(this.moviesURL, newMovie, httpOptions).pipe(tap(movie => console.log('Inserted Movie=${JSON.stringify(movie)}')), catchError(error => of(new Movie())));\n  } // DELETE: Delete the movie on the Server\n\n\n  deleteMovie(movieId) {\n    const url = `${this.moviesURL}/${movieId}`;\n    return this.http.delete(`${this.moviesURL}/${movie.id}`, movie, httpOptions).pipe(tap(updatedMovie => console.log('updatedMovie=${JSON.stringify(updatedMovie)}')), catchError(error => of(new Movie())));\n  }\n\n}\n\nMovieService.ɵfac = function MovieService_Factory(t) {\n  return new (t || MovieService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\n\nMovieService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MovieService,\n  factory: MovieService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA;AACA,SAASA,KAAT,QAAsB,iBAAtB,C,CACA;;AACA,SAASC,UAAT,EAAiCC,EAAjC,EAAqCC,GAArC,QAAgD,MAAhD;AAEA,SAAqBC,WAArB,QAAwC,sBAAxC;;;;AACA,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIF,WAAJ,CAAgB;IAAE,gBAAe;EAAjB,CAAhB;AADS,CAApB;AAOA,OAAM,MAAOG,YAAP,CAAmB;EACvBC,YAAoBC,IAApB,EAA6CC,cAA7C,EAA2E;IAAvD;IAAyB;IACrC,iBAAY,8BAAZ;EADwE;;EAEhFC,SAAS;IACP;IACA;IACA,OAAO,KAAKF,IAAL,CAAUG,GAAV,CAAuB,KAAKC,SAA5B,EAAuCC,IAAvC,CACLX,GAAG,CAACY,cAAc,IAAIC,OAAO,CAACC,GAAR,CAAY,kDAAZ,CAAnB,CADE,EAELhB,UAAU,CAACiB,KAAK,IAAIhB,EAAE,CAAC,EAAD,CAAZ,CAFL,CAAP;EAID;;EACDiB,cAAc,CAACC,EAAD,EAAW;IACvB;IACA,MAAMC,GAAG,GAAG,GAAG,KAAKR,SAAS,IAAIO,EAAE,EAAnC;IACA,OAAO,KAAKX,IAAL,CAAUG,GAAV,CAAqBS,GAArB,EAA0BP,IAA1B,CACLX,GAAG,CAACmB,aAAa,IAAIN,OAAO,CAACC,GAAR,CAAY,gDAAZ,CAAlB,CADE,EAELhB,UAAU,CAACiB,KAAK,IAAIhB,EAAE,CAAC,IAAIF,KAAJ,EAAD,CAAZ,CAFL,CAAP;EAID,CAlBsB,CAmBvB;;;EACAuB,WAAW,CAACC,KAAD,EAAa;IACtB,OAAO,KAAKf,IAAL,CAAUgB,GAAV,CAAc,GAAG,KAAKZ,SAAS,IAAIW,KAAK,CAACJ,EAAE,EAA3C,EAA8CI,KAA9C,EAAoDnB,WAApD,EAAiES,IAAjE,CACLX,GAAG,CAACuB,YAAY,IAAIV,OAAO,CAACC,GAAR,CAAY,8CAAZ,CAAjB,CADE,EAELhB,UAAU,CAACiB,KAAK,IAAIhB,EAAE,CAAC,IAAIF,KAAJ,EAAD,CAAZ,CAFL,CAAP;EAID,CAzBsB,CA0BvB;;;EACA2B,QAAQ,CAACC,QAAD,EAAgB;IACtB,OAAO,KAAKnB,IAAL,CAAUoB,IAAV,CAAe,KAAKhB,SAApB,EAA8Be,QAA9B,EAAuCvB,WAAvC,EAAoDS,IAApD,CACLX,GAAG,CAAEqB,KAAD,IAAiBR,OAAO,CAACC,GAAR,CAAY,yCAAZ,CAAlB,CADE,EAELhB,UAAU,CAACiB,KAAK,IAAIhB,EAAE,CAAC,IAAIF,KAAJ,EAAD,CAAZ,CAFL,CAAP;EAID,CAhCsB,CAiCvB;;;EACA8B,WAAW,CAACC,OAAD,EAAgB;IACzB,MAAMV,GAAG,GAAG,GAAG,KAAKR,SAAS,IAAIkB,OAAO,EAAxC;IACA,OAAO,KAAKtB,IAAL,CAAUuB,MAAV,CAAmB,GAAG,KAAKnB,SAAS,IAAIW,KAAK,CAACJ,EAAE,EAAhD,EAAmDI,KAAnD,EAAyDnB,WAAzD,EAAsES,IAAtE,CACLX,GAAG,CAACuB,YAAY,IAAIV,OAAO,CAACC,GAAR,CAAY,8CAAZ,CAAjB,CADE,EAELhB,UAAU,CAACiB,KAAK,IAAIhB,EAAE,CAAC,IAAIF,KAAJ,EAAD,CAAZ,CAFL,CAAP;EAID;;AAxCsB;;;mBAAZO,cAAY0B;AAAA;;;SAAZ1B;EAAY2B,SAAZ3B,YAAY;EAAA4B,YAFX","names":["Movie","catchError","of","tap","HttpHeaders","httpOptions","headers","MovieService","constructor","http","messageService","getMovies","get","moviesURL","pipe","receivedMovies","console","log","error","getMovieFromId","id","url","selectedMovie","updateMovie","movie","put","updatedMovie","addMovie","newMovie","post","deleteMovie","movieId","delete","i0","factory","providedIn"],"sourceRoot":"","sources":["D:\\Projects\\Angular5\\src\\app\\movie.service.ts"],"sourcesContent":["import { Injectable, Type } from '@angular/core';\n// import { fakeMovies } from '../models/fake-movies';\nimport { Movie } from '../models/movie';\n//Get data asynchronously with Observable\nimport { catchError, Observable, of, tap } from 'rxjs';\nimport { MessageService } from './message.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type':'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MovieService {\n  constructor(private http: HttpClient, public messageService: MessageService) { }\n  private moviesURL = 'http://localhost:3000/movies';\n  getMovies(): Observable<Movie[]> {\n    // this.messageService.add(`${ new Date().toLocaleString()}. Get movie list`);\n    // return of(fakeMovies);\n    return this.http.get<Movie[]>(this.moviesURL).pipe(\n      tap(receivedMovies => console.log('receivedMovies=${JSON.stringify(receivedMovies)}')),\n      catchError(error => of([]))\n    );\n  }\n  getMovieFromId(id: number): Observable<Movie> {\n    // return of(fakeMovies.find(movie => movie.id === id));\n    const url = `${this.moviesURL}/${id}`;\n    return this.http.get<Movie>(url).pipe(\n      tap(selectedMovie => console.log('selectedMovie=${JSON.stringify(selectedMovie)}')),\n      catchError(error => of(new Movie()))\n    );\n  }\n  // PUT: update the movie on the Server\n  updateMovie(movie: Movie): Observable<any>{    \n    return this.http.put(`${this.moviesURL}/${movie.id}`,movie,httpOptions).pipe(\n      tap(updatedMovie => console.log('updatedMovie=${JSON.stringify(updatedMovie)}')),\n      catchError(error => of(new Movie()))\n    );\n  } \n  // POST: add a new movie to the Server\n  addMovie(newMovie: Movie): Observable<Movie>{    \n    return this.http.post(this.moviesURL,newMovie,httpOptions).pipe(\n      tap((movie:Movie) => console.log('Inserted Movie=${JSON.stringify(movie)}')),\n      catchError(error => of(new Movie()))\n    );\n  } \n  // DELETE: Delete the movie on the Server\n  deleteMovie(movieId: Number): Observable<Movie>{    \n    const url = `${this.moviesURL}/${movieId}`;\n    return this.http.delete<>(`${this.moviesURL}/${movie.id}`,movie,httpOptions).pipe(\n      tap(updatedMovie => console.log('updatedMovie=${JSON.stringify(updatedMovie)}')),\n      catchError(error => of(new Movie()))\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}